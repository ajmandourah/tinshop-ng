// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ajmandourah/tinshop/repository (interfaces: Sources)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	http "net/http"
	reflect "reflect"

	repository "github.com/ajmandourah/tinshop/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockSources is a mock of Sources interface.
type MockSources struct {
	ctrl     *gomock.Controller
	recorder *MockSourcesMockRecorder
}

// MockSourcesMockRecorder is the mock recorder for MockSources.
type MockSourcesMockRecorder struct {
	mock *MockSources
}

// NewMockSources creates a new mock instance.
func NewMockSources(ctrl *gomock.Controller) *MockSources {
	mock := &MockSources{ctrl: ctrl}
	mock.recorder = &MockSourcesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSources) EXPECT() *MockSourcesMockRecorder {
	return m.recorder
}

// BeforeConfigUpdate mocks base method.
func (m *MockSources) BeforeConfigUpdate(arg0 repository.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeConfigUpdate", arg0)
}

// BeforeConfigUpdate indicates an expected call of BeforeConfigUpdate.
func (mr *MockSourcesMockRecorder) BeforeConfigUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeConfigUpdate", reflect.TypeOf((*MockSources)(nil).BeforeConfigUpdate), arg0)
}

// DownloadGame mocks base method.
func (m *MockSources) DownloadGame(arg0 string, arg1 http.ResponseWriter, arg2 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DownloadGame", arg0, arg1, arg2)
}

// DownloadGame indicates an expected call of DownloadGame.
func (mr *MockSourcesMockRecorder) DownloadGame(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadGame", reflect.TypeOf((*MockSources)(nil).DownloadGame), arg0, arg1, arg2)
}

// GetFiles mocks base method.
func (m *MockSources) GetFiles() []repository.FileDesc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles")
	ret0, _ := ret[0].([]repository.FileDesc)
	return ret0
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockSourcesMockRecorder) GetFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockSources)(nil).GetFiles))
}

// HasGame mocks base method.
func (m *MockSources) HasGame(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasGame", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasGame indicates an expected call of HasGame.
func (mr *MockSourcesMockRecorder) HasGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasGame", reflect.TypeOf((*MockSources)(nil).HasGame), arg0)
}

// OnConfigUpdate mocks base method.
func (m *MockSources) OnConfigUpdate(arg0 repository.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnConfigUpdate", arg0)
}

// OnConfigUpdate indicates an expected call of OnConfigUpdate.
func (mr *MockSourcesMockRecorder) OnConfigUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConfigUpdate", reflect.TypeOf((*MockSources)(nil).OnConfigUpdate), arg0)
}
