// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ajmandourah/tinshop-ng/repository (interfaces: Collection)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	repository "github.com/ajmandourah/tinshop-ng/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockCollection is a mock of Collection interface.
type MockCollection struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionMockRecorder
}

// MockCollectionMockRecorder is the mock recorder for MockCollection.
type MockCollectionMockRecorder struct {
	mock *MockCollection
}

// NewMockCollection creates a new mock instance.
func NewMockCollection(ctrl *gomock.Controller) *MockCollection {
	mock := &MockCollection{ctrl: ctrl}
	mock.recorder = &MockCollectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollection) EXPECT() *MockCollectionMockRecorder {
	return m.recorder
}

// AddNewGames mocks base method.
func (m *MockCollection) AddNewGames(arg0 []repository.FileDesc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddNewGames", arg0)
}

// AddNewGames indicates an expected call of AddNewGames.
func (mr *MockCollectionMockRecorder) AddNewGames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewGames", reflect.TypeOf((*MockCollection)(nil).AddNewGames), arg0)
}

// CountGames mocks base method.
func (m *MockCollection) CountGames() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountGames")
	ret0, _ := ret[0].(int)
	return ret0
}

// CountGames indicates an expected call of CountGames.
func (mr *MockCollectionMockRecorder) CountGames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountGames", reflect.TypeOf((*MockCollection)(nil).CountGames))
}

// Filter mocks base method.
func (m *MockCollection) Filter(arg0 string) repository.GameType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", arg0)
	ret0, _ := ret[0].(repository.GameType)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockCollectionMockRecorder) Filter(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockCollection)(nil).Filter), arg0)
}

// Games mocks base method.
func (m *MockCollection) Games() repository.GameType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Games")
	ret0, _ := ret[0].(repository.GameType)
	return ret0
}

// Games indicates an expected call of Games.
func (mr *MockCollectionMockRecorder) Games() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Games", reflect.TypeOf((*MockCollection)(nil).Games))
}

// GetKey mocks base method.
func (m *MockCollection) GetKey(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey.
func (mr *MockCollectionMockRecorder) GetKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockCollection)(nil).GetKey), arg0)
}

// HasGameIDInLibrary mocks base method.
func (m *MockCollection) HasGameIDInLibrary(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasGameIDInLibrary", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasGameIDInLibrary indicates an expected call of HasGameIDInLibrary.
func (mr *MockCollectionMockRecorder) HasGameIDInLibrary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasGameIDInLibrary", reflect.TypeOf((*MockCollection)(nil).HasGameIDInLibrary), arg0)
}

// IsBaseGame mocks base method.
func (m *MockCollection) IsBaseGame(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBaseGame", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBaseGame indicates an expected call of IsBaseGame.
func (mr *MockCollectionMockRecorder) IsBaseGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBaseGame", reflect.TypeOf((*MockCollection)(nil).IsBaseGame), arg0)
}

// Library mocks base method.
func (m *MockCollection) Library() map[string]repository.TitleDBEntry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Library")
	ret0, _ := ret[0].(map[string]repository.TitleDBEntry)
	return ret0
}

// Library indicates an expected call of Library.
func (mr *MockCollectionMockRecorder) Library() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Library", reflect.TypeOf((*MockCollection)(nil).Library))
}

// Load mocks base method.
func (m *MockCollection) Load() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Load")
}

// Load indicates an expected call of Load.
func (mr *MockCollectionMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCollection)(nil).Load))
}

// OnConfigUpdate mocks base method.
func (m *MockCollection) OnConfigUpdate(arg0 repository.Config) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnConfigUpdate", arg0)
}

// OnConfigUpdate indicates an expected call of OnConfigUpdate.
func (mr *MockCollectionMockRecorder) OnConfigUpdate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnConfigUpdate", reflect.TypeOf((*MockCollection)(nil).OnConfigUpdate), arg0)
}

// RemoveGame mocks base method.
func (m *MockCollection) RemoveGame(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveGame", arg0)
}

// RemoveGame indicates an expected call of RemoveGame.
func (mr *MockCollectionMockRecorder) RemoveGame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGame", reflect.TypeOf((*MockCollection)(nil).RemoveGame), arg0)
}

// ResetGamesCollection mocks base method.
func (m *MockCollection) ResetGamesCollection() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetGamesCollection")
}

// ResetGamesCollection indicates an expected call of ResetGamesCollection.
func (mr *MockCollectionMockRecorder) ResetGamesCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetGamesCollection", reflect.TypeOf((*MockCollection)(nil).ResetGamesCollection))
}
